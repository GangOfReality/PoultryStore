@inject HttpClient Http

<div class="category-carousel-container">
    <a class="category-carousel-control-prev" @onclick="ShiftLeft">
        <img src="img/arrow-left.svg" alt="Previous" />
    </a>
    <div class="category-carousel-frame">
        <ul style="transform: translateX(@TapePosition);">
            @foreach (var item in carouselItems)
            {
                <CarouselItem ImageLink="@item.ImageLink" Label="@item.Label" />
            }
        </ul>
    </div>
    <a class="category-carousel-control-next" @onclick="ShiftRight">
        <img src="img/arrow-right.svg" alt="Next" />
    </a>
</div>


@code {
    List<CarouselDto> carouselItems { get; set; }
    private int tapePosition;

    private string TapePosition
    {
        get => $"-{tapePosition.ToString()}px";
    }

    public Carousel()
    {
        carouselItems = new List<CarouselDto>();
    }

    protected override async Task OnInitializedAsync()
    {
        carouselItems = await Http.GetFromJsonAsync<List<CarouselDto>>("sample-data/categoryes.json");
    }

    public class CarouselDto
    {
        public string ImageLink { get; set; }
        public string Label { get; set; }
    }

    private void ShiftTape(int pixels)
    {
        tapePosition += pixels;
    }

    const int cartWidth = 304;
    const int carouselSize = 2;

    private void ShiftLeft()
    {
        if (tapePosition > 0)
        {
            ShiftTape(-cartWidth);
        }
    }

    private void ShiftRight()
    {
        if (tapePosition / cartWidth < carouselItems.Count - carouselSize)
        {
            ShiftTape(cartWidth);
        }
    }
}
